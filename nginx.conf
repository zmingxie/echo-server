user nginx;
worker_processes 1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
  worker_connections 1024;
}

env HOSTNAME;
env NODE_NAME;
env POD_NAME;
env POD_NAMESPACE;
env POD_IP;

http {
  default_type 'text/plain';

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
  access_log  /var/log/nginx/access.log  main;

  # maximum allowed size of the client request body. By default this is 1m.
  # Request with bigger bodies nginx will return error code 413.
  # http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size
  client_max_body_size 5m;

  init_by_lua_block {
    local template = require("template")
    -- template syntax documented here:
    -- https://github.com/bungle/lua-resty-template/blob/master/README.md
    tmpl = template.compile([[

Hostname: {{ os.getenv("HOSTNAME") or "N/A" }}

Server Info:
  nginx: {{ ngx.var.nginx_version }}
  lua:   {{ ngx.config.ngx_lua_version }}

Pod Information:
{% if os.getenv("POD_NAME") then %}
  Node name:      {{ os.getenv("NODE_NAME") or "N/A" }}
  Pod name:       {{ os.getenv("POD_NAME") or "N/A" }}
  Pod namespace:  {{ os.getenv("POD_NAMESPACE") or "N/A" }}
  Pod IP:         {{ os.getenv("POD_IP") or "N/A" }}
{% else %}
  -* No pod information available *-
{% end %}

Request Information:
  client_address: {{ ngx.var.remote_addr }}
  method: {{ ngx.req.get_method() }}
  real_path: {{ ngx.var.request_uri }}
  query: {{ ngx.var.query_string or "" }}
  request_version: {{ ngx.req.http_version() }}
  request_scheme: {{ ngx.var.scheme }}
  request_uri: {{ ngx.var.scheme.."://"..ngx.var.host..":"..ngx.var.server_port..ngx.var.request_uri }}

Request Headers:
{% for i, key in ipairs(keys) do %}
  {{ key }}: {{ headers[key] }}
{% end %}

Request Body:
{{ ngx.var.request_body or "  -* EMPTY *-" }}
]])
  }

  server {
    # More info about reuseport:
    #   https://www.nginx.com/blog/socket-sharding-nginx-release-1-9-1
    listen 8080 default_server reuseport;
    listen 8443 default_server ssl http2 reuseport;

    ssl_certificate /certs/echo-server.crt;
    ssl_certificate_key /certs/echo-server.key;

    location / {
      lua_need_request_body on;
      content_by_lua_block {
        ngx.header["Server"] = "echo-server"

        local headers = ngx.req.get_headers()
        local keys = {}
        for key, val in pairs(headers) do
          table.insert(keys, key)
        end
        table.sort(keys)

        ngx.say(tmpl({os=os, ngx=ngx, keys=keys, headers=headers}))
      }
    }
  }
}
